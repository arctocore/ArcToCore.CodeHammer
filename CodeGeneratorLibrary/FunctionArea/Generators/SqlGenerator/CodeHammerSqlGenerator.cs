/*
Copyright © ArcToCore All Rights Reserved
Software license for CodeHammer
Summary
License does not expire.
Can be used for creating unlimited applications
Can be distributed in binary or object form only
Can modify source-code but cannot distribute modifications (derivative works)
 */

namespace CodeHammer.Framework.FunctionArea.Generators.SqlGenerator
{
    using CodeHammer.Entities;
    using CodeHammer.Framework.FunctionArea.DataUtil;
    using CodeHammer.Framework.FunctionArea.FileIO;
    using CodeHammer.Framework.FunctionArea.Log;
    using System;
    using System.IO;

    /// <summary>
    /// Generates SQL Server stored procedures for a database.
    /// </summary>

    public class CodeHammerSqlGenerator : CodeHammerSqlGeneratorContract
    {
        #region Variables

        /// <summary>
        /// The code hammer data utility contract
        /// </summary>
        private CodeHammerDataUtilContract codeHammerDataUtilContract = null;

        /// <summary>
        /// The io manager contract
        /// </summary>
        private IOManagerContract ioManagerContract = null;

        /// <summary>
        /// The log function contract
        /// </summary>
        private LogFuncContract logFuncContract = null;

        /// <summary>
        /// The function type factory contract
        /// </summary>
        private FuncTypeFactoryContract funcTypeFactoryContract = null;

        #endregion Variables

        /// <summary>
        /// Initializes a new instance of the <see cref="CodeHammerServiceLibraryGenerator"/> class.
        /// </summary>
        /// <param name="codeHammerDataUtilContract">The code hammer data utility contract.</param>
        /// <param name="ioManagerContract">The io manager contract.</param>
        /// <param name="logFuncContract">The log function contract.</param>
        /// <param name="funcTypeFactoryContract">The function type factory contract.</param>
        public CodeHammerSqlGenerator(CodeHammerDataUtilContract codeHammerDataUtilContract,
            IOManagerContract ioManagerContract,
             LogFuncContract logFuncContract,
            FuncTypeFactoryContract funcTypeFactoryContract)
        {
            this.logFuncContract = logFuncContract;
            this.ioManagerContract = ioManagerContract;
            this.codeHammerDataUtilContract = codeHammerDataUtilContract;
            this.funcTypeFactoryContract = funcTypeFactoryContract;

            logFuncContract = funcTypeFactoryContract.GetFuncFromTypeEnum(FuncTypeFactory.FuncTypeEnum.LOGFUNCCONTRACT);
            ioManagerContract = funcTypeFactoryContract.GetFuncFromTypeEnum(FuncTypeFactory.FuncTypeEnum.IOMANAGERCONTRACT);
            codeHammerDataUtilContract = funcTypeFactoryContract.GetFuncFromTypeEnum(FuncTypeFactory.FuncTypeEnum.CODEHAMMERDATAUTILCONTRACT);
        }

        /// <summary>
        /// Creates an delete stored procedure SQL script for the specified table
        /// </summary>
        /// <param name="databaseName">The name of the database.</param>
        /// <param name="table">Instance of the Table class that represents the table this stored procedure will be
        /// created for.</param>
        /// <param name="path">Path where the stored procedure script should be created.</param>
        /// <param name="createMultipleFiles">Indicates the procedure(s) generated should be created in its own file.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateDeleteStoredProcedure(string databaseName, CodeHammerTableDto table, string path, bool createMultipleFiles)
        {
            //// Create the stored procedure name
            string procedureName = "[" + table.CodeHammerSchemaName + "]." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "RemoveByID";

            try
            {
                string fileName;

                //// Determine the file name to be used
                string pathToProject = path + ioManagerContract.CodeHammerStoredProcedureFolder + procedureName + ".sql";

                fileName = pathToProject;//Path.Combine(path, procedureName + ".sql");

                using (StreamWriter streamWriter = new StreamWriter(fileName, false))
                {
                    streamWriter.WriteLine("-- <auto-generated>");
                    streamWriter.WriteLine("--     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("--     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("--     the code is regenerated");
                    streamWriter.WriteLine("-- </auto-generated>");

                    //// Create the SQL for the stored procedure
                    streamWriter.WriteLine("create procedure " + procedureName);
                    streamWriter.WriteLine("(");

                    //// Create the parameter list
                    for (int i = 0; i < table.CodeHammerPrimaryKeys.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerPrimaryKeys[i];

                        if (i < (table.CodeHammerPrimaryKeys.Count - 1))
                        {
                            streamWriter.WriteLine(" " + codeHammerDataUtilContract.CodeHammerCreateParameterString(codeHammerColumn, false) + ",");
                        }
                        else
                        {
                            streamWriter.WriteLine(" " + codeHammerDataUtilContract.CodeHammerCreateParameterString(codeHammerColumn, false));
                        }
                    }
                    streamWriter.WriteLine(")");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("as");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("set nocount on");
                    streamWriter.WriteLine();

                    streamWriter.WriteLine("delete from [" + table.CodeHammerSchemaName + "].[" + table.CodeHammerName + "]");
                    streamWriter.Write("where");

                    //// Create the where clause
                    for (int i = 0; i < table.CodeHammerPrimaryKeys.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerPrimaryKeys[i];

                        if (i == 0)
                        {
                            streamWriter.WriteLine(" [" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);
                        }
                        else
                        {
                            streamWriter.WriteLine(" and [" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);
                        }
                    }
                    //}

                    streamWriter.WriteLine("RETURN");
                }
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                logFuncContract.Logger(ex.Message);
                ioManagerContract.LogBuilder.AppendLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                ioManagerContract.LogBuilder.AppendLine();
                return false;
            }
        }

        /// <summary>
        /// Creates an insert stored procedure SQL script for the specified table
        /// </summary>
        /// <param name="databaseName">The name of the database.</param>
        /// <param name="table">Instance of the Table class that represents the table this stored procedure will be
        /// created for.</param>
        /// <param name="path">Path where the stored procedure script should be created.</param>
        /// <param name="createMultipleFiles">Indicates the procedure(s) generated should be created in its own file.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateInsertStoredProcedure(string databaseName, CodeHammerTableDto table, string path, bool createMultipleFiles)
        {
            string procedureName = "[" + table.CodeHammerSchemaName + "]." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "Save";
            try
            {
                string fileName;
                string pathToProject = path + ioManagerContract.CodeHammerStoredProcedureFolder + procedureName + ".sql";
                fileName = pathToProject;//Path.Combine(path, procedureName + ".sql");

                using (StreamWriter streamWriter = new StreamWriter(fileName, false))
                {
                    streamWriter.WriteLine("-- <auto-generated>");
                    streamWriter.WriteLine("--     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("--     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("--     the code is regenerated");
                    streamWriter.WriteLine("-- </auto-generated>");

                    //// Create the SQL for the stored procedure
                    streamWriter.WriteLine("create procedure " + procedureName);

                    streamWriter.WriteLine("(");

                    //// Create the parameter list
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];

                        if (codeHammerColumn.CodeHammerIsIdentity == false || codeHammerColumn.CodeHammerIsRowGuidCol == false)
                        {
                            if (!codeHammerColumn.CodeHammerIsIdentity)
                            {
                                streamWriter.Write(" " + codeHammerDataUtilContract.CodeHammerCreateParameterString(codeHammerColumn, true));

                                if (i < (table.CodeHammerColumns.Count - 1))
                                {
                                    streamWriter.Write(",");
                                }
                                streamWriter.WriteLine();
                            }
                        }
                    }
                    streamWriter.WriteLine(")");

                    streamWriter.WriteLine();

                    streamWriter.WriteLine("as");

                    streamWriter.WriteLine();

                    streamWriter.WriteLine("set nocount on");

                    streamWriter.WriteLine();

                    //// Initialize all RowGuidCol codeHammerColumns
                    foreach (CodeHammerColumn codeHammerColumn in table.CodeHammerColumns)
                    {
                        if (codeHammerColumn.CodeHammerIsRowGuidCol)
                        {
                            streamWriter.WriteLine("set @" + codeHammerColumn.CodeHammerName + " = NewID()");

                            streamWriter.WriteLine();

                            break;
                        }
                    }

                    streamWriter.WriteLine("insert into [" + table.CodeHammerSchemaName + "].[" + table.CodeHammerName + "]");

                    streamWriter.WriteLine("(");

                    //// Create the parameter list
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];

                        //// Ignore any identity codeHammerColumns
                        if (codeHammerColumn.CodeHammerIsIdentity == false)
                        {
                            //// Append the codeHammerColumn name as a parameter of the insert statement
                            if (i < (table.CodeHammerColumns.Count - 1))
                            {
                                streamWriter.WriteLine(" [" + codeHammerColumn.CodeHammerName + "],");
                            }
                            else
                            {
                                streamWriter.WriteLine(" [" + codeHammerColumn.CodeHammerName + "]");
                            }
                        }
                    }

                    streamWriter.WriteLine(")");

                    streamWriter.WriteLine("values");

                    streamWriter.WriteLine("(");

                    //// Create the values list
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];

                        //// Is the current codeHammerColumn an identity codeHammerColumn?
                        if (codeHammerColumn.CodeHammerIsIdentity == false)
                        {
                            //// Append the necessary line breaks and commas
                            if (i < (table.CodeHammerColumns.Count - 1))
                            {
                                streamWriter.WriteLine(" @" + codeHammerColumn.CodeHammerName + ",");
                            }
                            else
                            {
                                streamWriter.WriteLine(" @" + codeHammerColumn.CodeHammerName);
                            }
                        }
                    }

                    streamWriter.WriteLine(")");
                    streamWriter.WriteLine();

                    //// Should we include a line for returning the identity?
                    foreach (CodeHammerColumn codeHammerColumn in table.CodeHammerColumns)
                    {
                        //// Is the current codeHammerColumn an identity codeHammerColumn?
                        if (codeHammerColumn.CodeHammerIsIdentity)
                        {
                            streamWriter.WriteLine();

                            streamWriter.WriteLine("select scope_identity()");

                            break;
                        }
                        else if (codeHammerColumn.CodeHammerIsRowGuidCol)
                        {
                            streamWriter.WriteLine();

                            streamWriter.WriteLine("Select @" + codeHammerColumn.CodeHammerName);

                            break;
                        }
                    }

                    streamWriter.WriteLine("RETURN");
                }
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                logFuncContract.Logger(ex.Message);
                ioManagerContract.LogBuilder.AppendLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                ioManagerContract.LogBuilder.AppendLine();
                return false;
                //throw new Exception(ex.StackTrace);
            }
        }

        /// <summary>
        /// Creates the select all stored procedure.
        /// </summary>
        /// <param name="pageSize">The pagesize.</param>
        /// <param name="databaseName">Name of the database.</param>
        /// <param name="table">The table.</param>
        /// <param name="path">The path.</param>
        /// <param name="createMultipleFiles">if set to <c>true</c> [create multiple files].</param>
        /// <returns>if sucess then return true</returns>
        /// <exception cref="System.Exception"></exception>
        public bool CodeHammerCreateSelectAllStoredProcedure(string pageSize, string databaseName, CodeHammerTableDto table, string path, bool createMultipleFiles)
        {
            string procedureName = "[" + table.CodeHammerSchemaName + "]." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "GetAll";

            try
            {
                string fileName;

                //// Determine the file name to be used
                string pathToProject = path + ioManagerContract.CodeHammerStoredProcedureFolder + procedureName + ".sql";

                fileName = pathToProject;//Path.Combine(path, procedureName + ".sql");

                using (StreamWriter streamWriter = new StreamWriter(fileName, false))
                {
                    streamWriter.WriteLine("-- <auto-generated>");
                    streamWriter.WriteLine("--     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("--     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("--     the code is regenerated");
                    streamWriter.WriteLine("-- </auto-generated>");

                    streamWriter.WriteLine("--******************************************Description******************************************");

                    //// Create the SQL for the stored procedure
                    streamWriter.WriteLine("create procedure" + procedureName);
                    streamWriter.WriteLine("(");
                    streamWriter.WriteLine(" @pageSize int");
                    streamWriter.WriteLine(")");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("as");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("set nocount on");
                    streamWriter.WriteLine();
                    streamWriter.Write("select TOP(@pageSize)");

                    //// Create the list of codeHammerColumns
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];

                        if (i == 0)
                        {
                            streamWriter.Write(" ");
                        }
                        else
                        {
                            streamWriter.Write(" ");
                        }

                        streamWriter.Write("[" + codeHammerColumn.CodeHammerName + "]\n");

                        if (i < (table.CodeHammerColumns.Count - 1))
                        {
                            streamWriter.Write(",");
                        }

                        // streamWriter.WriteLine();
                    }

                    streamWriter.WriteLine(" from [" + table.CodeHammerSchemaName + "].[" + table.CodeHammerName + "]");
                    streamWriter.WriteLine("RETURN");
                }
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                logFuncContract.Logger(ex.Message);
                ioManagerContract.LogBuilder.AppendLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                ioManagerContract.LogBuilder.AppendLine();
                return false;
            }
        }

        /// <summary>
        /// Creates an select stored procedure SQL script for the specified table
        /// </summary>
        /// <param name="databaseName">The name of the database.</param>
        /// <param name="table">Instance of the Table class that represents the table this stored procedure will be
        /// created for.</param>
        /// <param name="path">Path where the stored procedure script should be created.</param>
        /// <param name="createMultipleFiles">Indicates the procedure(s) generated should be created in its own file.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateSelectStoredProcedure(string databaseName, CodeHammerTableDto table, string path, bool createMultipleFiles)
        {
            //// Create the stored procedure name
            string procedureName = "[" + table.CodeHammerSchemaName + "]." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "GetByID";

            try
            {
                string fileName;

                //// Determine the file name to be used
                string pathToProject = path + ioManagerContract.CodeHammerStoredProcedureFolder + procedureName + ".sql";

                fileName = pathToProject;//Path.Combine(path, procedureName + ".sql");

                using (StreamWriter streamWriter = new StreamWriter(fileName, false))
                {
                    streamWriter.WriteLine("-- <auto-generated>");
                    streamWriter.WriteLine("--     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("--     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("--     the code is regenerated");
                    streamWriter.WriteLine("-- </auto-generated>");

                    streamWriter.WriteLine("--******************************************Description******************************************");

                    //// Create the SQL for the stored procedure
                    streamWriter.WriteLine("create procedure " + procedureName);
                    streamWriter.WriteLine("(");

                    //// Create the parameter list
                    for (int i = 0; i < table.CodeHammerPrimaryKeys.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerPrimaryKeys[i];

                        if (i == (table.CodeHammerPrimaryKeys.Count - 1))
                        {
                            streamWriter.WriteLine(" " + codeHammerDataUtilContract.CodeHammerCreateParameterString(codeHammerColumn, false));
                        }
                        else
                        {
                            streamWriter.WriteLine(" " + codeHammerDataUtilContract.CodeHammerCreateParameterString(codeHammerColumn, false) + ",");
                        }
                    }

                    streamWriter.WriteLine(")");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("as");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("set nocount on");
                    streamWriter.WriteLine();
                    streamWriter.Write("select");

                    //// Create the list of codeHammerColumns
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];

                        if (i == 0)
                        {
                            streamWriter.Write(" ");
                        }
                        else
                        {
                            streamWriter.Write(" ");
                        }

                        streamWriter.Write("[" + codeHammerColumn.CodeHammerName + "]");

                        if (i < (table.CodeHammerColumns.Count - 1))
                        {
                            streamWriter.Write(",");
                        }

                        streamWriter.WriteLine();
                    }

                    streamWriter.WriteLine(" from [" + table.CodeHammerSchemaName + "].[" + table.CodeHammerName + "]");
                    streamWriter.Write("where");

                    //// Create the where clause
                    for (int i = 0; i < table.CodeHammerPrimaryKeys.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerPrimaryKeys[i];

                        if (i == 0)
                        {
                            streamWriter.WriteLine(" [" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);
                        }
                        else
                        {
                            streamWriter.WriteLine(" and [" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);
                        }
                    }

                    streamWriter.WriteLine("RETURN");
                }
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                logFuncContract.Logger(ex.Message);
                ioManagerContract.LogBuilder.AppendLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                ioManagerContract.LogBuilder.AppendLine();
                return false;
            }
        }

        /// <summary>
        /// Creates an update stored procedure SQL script for the specified table
        /// </summary>
        /// <param name="databaseName">The name of the database.</param>
        /// <param name="table">Instance of the Table class that represents the table this stored procedure will be
        /// created for.</param>
        /// <param name="path">Path where the stored procedure script should be created.</param>
        /// <param name="createMultipleFiles">Indicates the procedure(s) generated should be created in its own file.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateUpdateStoredProcedure(string databaseName, CodeHammerTableDto table, string path, bool createMultipleFiles)
        {
            string procedureName = "[" + table.CodeHammerSchemaName + "]." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "SetByID";

            try
            {
                string fileName;

                //// Determine the file name to be used
                string pathToProject = path + ioManagerContract.CodeHammerStoredProcedureFolder + procedureName + ".sql";

                fileName = pathToProject;//Path.Combine(path, procedureName + ".sql");

                using (StreamWriter streamWriter = new StreamWriter(fileName, false))
                {
                    streamWriter.WriteLine("-- <auto-generated>");
                    streamWriter.WriteLine("--     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("--     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("--     the code is regenerated");
                    streamWriter.WriteLine("-- </auto-generated>");

                    streamWriter.WriteLine("--******************************************Description******************************************");

                    //// Create the SQL for the stored procedure
                    streamWriter.WriteLine("create procedure " + procedureName);
                    streamWriter.WriteLine("(");

                    //// Create the parameter list
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];

                        if (i == 0)
                        {
                        }
                        if (i < (table.CodeHammerColumns.Count - 1))
                        {
                            streamWriter.WriteLine(" " + codeHammerDataUtilContract.CodeHammerCreateParameterString(codeHammerColumn, false) + ",");
                        }
                        else
                        {
                            streamWriter.WriteLine(" " + codeHammerDataUtilContract.CodeHammerCreateParameterString(codeHammerColumn, false));
                        }
                    }
                    streamWriter.WriteLine(")");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("as");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("set nocount on");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("update [" + table.CodeHammerSchemaName + "].[" + table.CodeHammerName + "]");
                    streamWriter.Write("set ");

                    //// Create the set statement
                    bool firstLine = true;
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = (CodeHammerColumn)table.CodeHammerColumns[i];

                        //// Ignore Identity and RowGuidCol codeHammerColumns
                        if (table.CodeHammerPrimaryKeys.Contains(codeHammerColumn) == false)
                        {
                            if (firstLine)
                            {
                                streamWriter.Write(" ");
                                firstLine = false;
                            }
                            else
                            {
                                streamWriter.Write(" ");
                            }

                            streamWriter.Write("[" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);

                            if (i < (table.CodeHammerColumns.Count - 1))
                            {
                                streamWriter.Write(",");
                            }

                            streamWriter.WriteLine();
                        }
                        else
                        {
                            if (table.CodeHammerPrimaryKeys.Contains(codeHammerColumn) == true && !codeHammerColumn.CodeHammerIsIdentity)
                            {
                                if (firstLine)
                                {
                                    streamWriter.Write(" ");
                                    firstLine = false;
                                }
                                else
                                {
                                    streamWriter.Write(" ");
                                }
                                streamWriter.Write("[" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);

                                if (i < (table.CodeHammerColumns.Count - 1))
                                {
                                    streamWriter.Write(",");
                                }

                                streamWriter.WriteLine();
                            }
                        }
                    }

                    streamWriter.Write("where");

                    //// Create the where clause
                    for (int i = 0; i < table.CodeHammerPrimaryKeys.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerPrimaryKeys[i];

                        if (i == 0)
                        {
                            streamWriter.Write(" [" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);
                        }
                        else
                        {
                            streamWriter.Write(" and [" + codeHammerColumn.CodeHammerName + "] = @" + codeHammerColumn.CodeHammerName);
                        }
                    }
                    streamWriter.WriteLine();

                    streamWriter.WriteLine("RETURN");
                }
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                logFuncContract.Logger(ex.Message);
                ioManagerContract.LogBuilder.AppendLine("Stored procedure: " + procedureName + " could not be generated\n" + ex.StackTrace);
                ioManagerContract.LogBuilder.AppendLine();
                return false;
            }
        }
    }
}