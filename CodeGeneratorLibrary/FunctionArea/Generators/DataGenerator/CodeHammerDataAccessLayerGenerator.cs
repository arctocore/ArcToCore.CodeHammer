/*
Copyright © ArcToCore All Rights Reserved
Software license for CodeHammer
Summary
License does not expire.
Can be used for creating unlimited applications
Can be distributed in binary or object form only
Can modify source-code but cannot distribute modifications (derivative works)
 */

namespace CodeHammer.Framework.FunctionArea.Generators.DataGenerator
{
    using CodeHammer.Entities;
    using CodeHammer.Framework.FunctionArea.DataUtil;
    using CodeHammer.Framework.FunctionArea.FileIO;
    using CodeHammer.Framework.FunctionArea.Log;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;

    /// <summary>
    /// this class CodeHammerDataAccessLayerGenerator
    /// </summary>

    public class CodeHammerDataAccessLayerGenerator : CodeHammerDataAccessLayerGeneratorContract
    {
        #region Variables

        /// <summary>
        /// The code hammer data utility contract
        /// </summary>
        private CodeHammerDataUtilContract codeHammerDataUtilContract = null;

        /// <summary>
        /// The io manager contract
        /// </summary>
        private IOManagerContract ioManagerContract = null;

        /// <summary>
        /// The log function contract
        /// </summary>
        private LogFuncContract logFuncContract = null;

        /// <summary>
        /// The function type factory contract
        /// </summary>
        private FuncTypeFactoryContract funcTypeFactoryContract = null;

        #endregion Variables

        /// <summary>
        /// Initializes a new instance of the <see cref="CodeHammerDTOGenerator"/> class.
        /// </summary>
        /// <param name="codeHammerDataUtilContract">The code hammer data utility contract.</param>
        /// <param name="ioManagerContract">The io manager contract.</param>
        /// <param name="logFuncContract">The log function contract.</param>
        /// <param name="funcTypeFactoryContract">The function type factory contract.</param>
        public CodeHammerDataAccessLayerGenerator(CodeHammerDataUtilContract codeHammerDataUtilContract,
            IOManagerContract ioManagerContract,
             LogFuncContract logFuncContract,
            FuncTypeFactoryContract funcTypeFactoryContract)
        {
            this.logFuncContract = logFuncContract;
            this.ioManagerContract = ioManagerContract;
            this.codeHammerDataUtilContract = codeHammerDataUtilContract;
            this.funcTypeFactoryContract = funcTypeFactoryContract;

            logFuncContract = funcTypeFactoryContract.GetFuncFromTypeEnum(FuncTypeFactory.FuncTypeEnum.LOGFUNCCONTRACT);
            codeHammerDataUtilContract = funcTypeFactoryContract.GetFuncFromTypeEnum(FuncTypeFactory.FuncTypeEnum.CODEHAMMERDATAUTILCONTRACT);
            ioManagerContract = funcTypeFactoryContract.GetFuncFromTypeEnum(FuncTypeFactory.FuncTypeEnum.IOMANAGERCONTRACT);
        }

        /// <summary>
        /// Creates a C# data access class for all of the
        /// table's stored procedures.
        /// </summary>
        /// <param name="selectTables">if set to <c>true</c> [select tables].</param>
        /// <param name="tableDic">The table dic.</param>
        /// <param name="databaseName">The name of the database.</param>
        /// <param name="table">Instance of the Table class that represents the table this class will be created for.</param>
        /// <param name="crudYesNo">if set to <c>true</c> [crud yes no].</param>
        /// <param name="resultDataOptions">The result data options.</param>
        /// <param name="targetNamespaceDAL">The target namespace DAL.</param>
        /// <param name="path">Path where the class should be created.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateDataAccessClass(bool selectTables, Dictionary<string, List<Dictionary<string, string>>> tableDic, string databaseName, CodeHammerTableDto table, bool crudYesNo, List<string> resultDataOptions, string targetNamespaceDAL, string path)
        {
            string quates = @"""";

            try
            {
                string className = string.Empty;
                className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim().Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DalTextBox;

                string pathToProject = path + ioManagerContract.CodeHammerRepositoryFolder + className + ".cs";

                if (ioManagerContract.CheckIfFileExists(pathToProject))
                {
                    return false;
                }

                using (StreamWriter streamWriter = new StreamWriter(pathToProject))
                {
                    streamWriter.WriteLine("// <auto-generated>");
                    streamWriter.WriteLine("//     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("//     the code is regenerated");
                    streamWriter.WriteLine("// </auto-generated>");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("namespace Data");
                    streamWriter.WriteLine("{");
                    //// Create the header for the class

                    if (!ioManagerContract.EmptyDataLayerCheckBox)
                    {
                        streamWriter.WriteLine("    using Data.Infrastructure;");
                    }

                    streamWriter.WriteLine("    using Domain;");
                    streamWriter.WriteLine("    using System;");
                    streamWriter.WriteLine("    using System.Collections.Generic;");
                    streamWriter.WriteLine("    using System.Data;");
                    if (!ioManagerContract.EmptyDataLayerCheckBox)
                    {
                        streamWriter.WriteLine("    using System.Data.SqlClient;");
                    }
                    streamWriter.WriteLine();

                    streamWriter.WriteLine("    /// <summary>");
                    streamWriter.WriteLine("    /// This class " + className);
                    streamWriter.WriteLine("    /// </summary>");


                    if (ioManagerContract.UseIoC)
                    {
                        streamWriter.WriteLine("    public class " + className + ": I" + className);
                    }
                    else
                    {
                        streamWriter.WriteLine("    public class " + className);
                    }

                    streamWriter.WriteLine("    {");

                    if (!ioManagerContract.EmptyDataLayerCheckBox)
                    {
                        if (ioManagerContract.UseIoC)
                        {
                            streamWriter.WriteLine();

                            streamWriter.WriteLine("    /// <summary>");
                            streamWriter.WriteLine("    /// The iDatabaseManager");
                            streamWriter.WriteLine("    /// </summary>");
                            streamWriter.WriteLine("    IDatabaseManager iDatabaseManager;");
                            streamWriter.WriteLine();

                            streamWriter.WriteLine("    /// <summary>");
                            streamWriter.WriteLine("    /// Initializes a new instance of the <see cref=" + quates + className + quates + "/> class.");
                            streamWriter.WriteLine("    /// </summary>");
                            streamWriter.WriteLine("    /// <param name=" + quates + "iDatabaseManager" + quates + ">The iDatabaseManager.</param>");
                            streamWriter.WriteLine("    public " + className + "(IDatabaseManager iDatabaseManager)");
                            streamWriter.WriteLine("    {");
                            streamWriter.WriteLine("        this.iDatabaseManager = iDatabaseManager;");
                            streamWriter.WriteLine("    }");
                        }
                    }

                    if (crudYesNo)
                    {
                        
                            CodeHammerCreateInsertMethod(table, streamWriter);
                            CodeHammerCreateUpdateMethod(table, streamWriter);
                            CodeHammerCreateDeleteMethod(table, streamWriter);
                            CodeHammerCreateSelectMethod(table, streamWriter);
                            CodeHammerCreateSelectAllMethod(table, streamWriter);
                         
                    }

                    //// Close out the class and namespace
                    streamWriter.WriteLine("    }");
                    streamWriter.WriteLine("}");
                    return true;
                }
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Codes the hammer create data access class unit test.
        /// </summary>
        /// <param name="selectTables">if set to <c>true</c> [select tables].</param>
        /// <param name="tableDic">The table dic.</param>
        /// <param name="databaseName">Name of the database.</param>
        /// <param name="table">The table.</param>
        /// <param name="crudYesNo">if set to <c>true</c> [crud yes no].</param>
        /// <param name="resultDataOptions">The result data options.</param>
        /// <param name="targetNamespaceDAL">The target namespace dal.</param>
        /// <param name="path">The path.</param>
        public void CodeHammerCreateDataAccessClassUnitTest(bool selectTables, Dictionary<string, List<Dictionary<string, string>>> tableDic, string databaseName, CodeHammerTableDto table, bool crudYesNo, List<string> resultDataOptions, string targetNamespaceDAL, string path)
        {
            string className = string.Empty;
            className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim().Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DalTextBox;

            // path = Path.Combine(path, "CodeHammerRepository");

            string pathToProject = path + ioManagerContract.VisualstudioSolutionDataRepositoryTestProjectFolder + className + SuffixDto.Instance().TestTextBox + ".cs";
            if (ioManagerContract.CheckIfFileExists(pathToProject))
            {
                return;
            }

            #region DataRepository Layer UnitTest

            if (ioManagerContract.UnitTest)
            {
                using (StreamWriter streamWriter = new StreamWriter(pathToProject))
                {
                    streamWriter.WriteLine("// <auto-generated>");
                    streamWriter.WriteLine("//     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("//     the code is regenerated");
                    streamWriter.WriteLine("// </auto-generated>");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("namespace SolutionTest.DataTests");
                    streamWriter.WriteLine("{");
                    //// Create the header for the class
                    streamWriter.WriteLine("    using Data;");
                    streamWriter.WriteLine("    using Domain;");
                    if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.NUnit)
                    {
                        streamWriter.WriteLine("    using NUnit.Framework;");
                    }
                    if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.VSUnitTest)
                    {
                        streamWriter.WriteLine("    using Microsoft.VisualStudio.TestTools.UnitTesting;");
                    }
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("    /// <summary>");
                    streamWriter.WriteLine("    //// this class " + className + SuffixDto.Instance().TestTextBox);
                    streamWriter.WriteLine("    /// </summary>");
                    if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.NUnit)
                    {
                        streamWriter.WriteLine("    [TestFixture]");
                    }
                    if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.VSUnitTest)
                    {
                        streamWriter.WriteLine("    [TestClass]");
                    }
                    streamWriter.WriteLine("    public class " + className + SuffixDto.Instance().TestTextBox);
                    streamWriter.WriteLine("    {");

                    if (crudYesNo)
                    {
                       
                            CodeHammerCreateInsertMethodTest(table, streamWriter);
                            CodeHammerCreateUpdateMethodTest(table, streamWriter);
                            CodeHammerCreateDeleteMethodTest(table, streamWriter);
                            CodeHammerCreateSelectMethodTest(table, streamWriter);
                            CodeHammerCreateSelectAllMethodTest(table, streamWriter);
                        
                    }

                    //// Close out the class and namespace
                    streamWriter.WriteLine("    }");
                    streamWriter.WriteLine("}");
                }
            }

            #endregion DataRepository Layer UnitTest
        }

        /// <summary>
        /// Codes the hammer create data access interface.
        /// </summary>
        /// <param name="selectTables">if set to <c>true</c> [select tables].</param>
        /// <param name="tableDic">The table dic.</param>
        /// <param name="databaseName">Name of the database.</param>
        /// <param name="table">The table.</param>
        /// <param name="crudYesNo">if set to <c>true</c> [crud yes no].</param>
        /// <param name="resultDataOptions">The result data options.</param>
        /// <param name="targetNamespaceDAL">The target namespace dal.</param>
        /// <param name="path">The path.</param>
        /// <returns>if sucess then return true</returns>
        /// <exception cref="System.Exception">Exception</exception>
        public bool CodeHammerCreateDataAccessInterface(bool selectTables, Dictionary<string, List<Dictionary<string, string>>> tableDic, string databaseName, CodeHammerTableDto table, bool crudYesNo, List<string> resultDataOptions, string targetNamespaceDAL, string path)
        {
            try
            {
                string className = string.Empty;
                className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim().Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DalTextBox;

                //path = Path.Combine(path, "CodeHammerRepository");

                string pathToProject = path + ioManagerContract.ICodeHammerRepositoryFolder + "I" + className + ".cs";

                if (ioManagerContract.CheckIfFileExists(pathToProject))
                {
                    return false;
                }

                using (StreamWriter streamWriter = new StreamWriter(pathToProject))
                {
                    streamWriter.WriteLine("// <auto-generated>");
                    streamWriter.WriteLine("//     This code was generated by a CodeHammer");
                    streamWriter.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
                    streamWriter.WriteLine("//     the code is regenerated");
                    streamWriter.WriteLine("// </auto-generated>");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("namespace Data");
                    streamWriter.WriteLine("{");
                    //// Create the header for the class
                    streamWriter.WriteLine("    using System;");
                    streamWriter.WriteLine();

                    streamWriter.WriteLine("    /// <summary>");
                    streamWriter.WriteLine("    /// This interface " + className);
                    streamWriter.WriteLine("    /// </summary>");

                    streamWriter.WriteLine("    public interface I" + className);

                    streamWriter.WriteLine("    {");

                    //// Append the access methods

                    if (crudYesNo)
                    {
                       
                            ICodeHammerCreateInsertMethod(table, streamWriter);
                            ICodeHammerCreateUpdateMethod(table, streamWriter);
                            ICodeHammerCreateDeleteMethod(table, streamWriter);
                            ICodeHammerCreateSelectMethod(table, streamWriter);
                            ICodeHammerCreateSelectAllMethod(table, streamWriter);
                         
                    }

                    //// Close out the class and namespace
                    streamWriter.WriteLine("    }");
                    streamWriter.WriteLine("}");
                    return true;
                }
            }
            catch (Exception ex)
            {
                return false;
                throw new Exception(ex.ToString());
            }
        }

        /// <summary>
        /// Codes the hammer create data management interface.
        /// </summary>
        /// <param name="path">The path.</param>
        /// <param name="ioc">if set to <c>true</c> [ioc].</param>
        /// <returns>if sucess then return true</returns>
        /// <exception cref="System.Exception">Exception</exception>
        public bool CodeHammerCreateDataManagementInterface(string path, bool ioc)
        {
            string quates = @"""";

            string pathToProject = path + ioManagerContract.CodeHammerRepositoryDatabaseManagementFolder + "DatabaseManager.cs";

            ////inherit from interface
            string contents = string.Empty;

            try
            {
                if (ioc)
                {
                    using (StreamReader reader = new StreamReader(pathToProject))
                    {
                        contents = reader.ReadToEnd();
                        //contents = contents.Replace("<Interface>", "using Data.IDatabaseManagement;").Replace("<DatabaseManager>", "DatabaseManager : IDatabaseManager").Replace("<ClassInstance>", "");
                        contents = contents.Replace("<DatabaseManager>", "DatabaseManager : IDatabaseManager").Replace("<ClassInstance>", "");
                    }

                    using (StreamWriter writer = new StreamWriter(pathToProject))
                    {
                        writer.Write(contents);
                    }
                }

                if (!ioc)
                {
                    StringBuilder classInstanceBuilder = new StringBuilder();
                    classInstanceBuilder.Length = 0;
                    classInstanceBuilder.Capacity = 0;
                    classInstanceBuilder.AppendLine();
                    classInstanceBuilder.AppendLine("	    public static readonly DatabaseManager ClassInstance = new DatabaseManager();");
                    classInstanceBuilder.AppendLine();

                    classInstanceBuilder.AppendLine("	    /// <summary>");
                    classInstanceBuilder.AppendLine("	    /// Prevents a default instance of the <see cref=" + quates + "DatabaseManager" + quates + "/> class from being created.");
                    classInstanceBuilder.AppendLine("	    /// </summary>");
                    classInstanceBuilder.AppendLine("	    private DatabaseManager()");
                    classInstanceBuilder.AppendLine("	    {");
                    classInstanceBuilder.AppendLine("	    }");
                    classInstanceBuilder.AppendLine();
                    classInstanceBuilder.AppendLine("	    /// <summary>");
                    classInstanceBuilder.AppendLine("	    /// Gets the instance.");
                    classInstanceBuilder.AppendLine("	    /// </summary>");
                    classInstanceBuilder.AppendLine("	    /// <value>");
                    classInstanceBuilder.AppendLine("	    /// The instance.");
                    classInstanceBuilder.AppendLine("	    /// </value>");
                    classInstanceBuilder.AppendLine("	    public static DatabaseManager Instance");
                    classInstanceBuilder.AppendLine("	    {");
                    classInstanceBuilder.AppendLine("	        get");
                    classInstanceBuilder.AppendLine("	        {");
                    classInstanceBuilder.AppendLine("	            return ClassInstance;");
                    classInstanceBuilder.AppendLine("	        }");
                    classInstanceBuilder.AppendLine("	    }");

                    using (StreamReader reader = new StreamReader(pathToProject))
                    {
                        contents = reader.ReadToEnd();
                        contents = contents.Replace("<Interface>", "").Replace("<DatabaseManager>", "DatabaseManager").Replace("<ClassInstance>", classInstanceBuilder.ToString());
                    }

                    using (StreamWriter writer = new StreamWriter(pathToProject))
                    {
                        writer.Write(contents);
                    }
                }

                if (ioc)
                {
                    pathToProject = path + ioManagerContract.CodeHammerRepositoryDatabaseManagementFolder + "IDatabaseManager.cs";

                    if (ioManagerContract.CheckIfFileExists(pathToProject))
                    {
                        return false;
                    }

                    using (StreamWriter streamWriter = new StreamWriter(pathToProject))
                    {
                        streamWriter.WriteLine("// <auto-generated>");
                        streamWriter.WriteLine("//     This code was generated by a CodeHammer");
                        streamWriter.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
                        streamWriter.WriteLine("//     the code is regenerated");
                        streamWriter.WriteLine("// </auto-generated>");
                        streamWriter.WriteLine();
                        streamWriter.WriteLine("namespace Data.Infrastructure");
                        streamWriter.WriteLine("{");
                        //// Create the header for the class
                        streamWriter.WriteLine();
                        streamWriter.WriteLine("    /// <summary>");
                        streamWriter.WriteLine("    /// public interface IDatabaseManager");
                        streamWriter.WriteLine("    /// </summary>");
                        streamWriter.WriteLine("    public interface IDatabaseManager");
                        streamWriter.WriteLine("    {");

                        streamWriter.WriteLine("        /// <summary>");
                        streamWriter.WriteLine("        /// Determines whether the specified r has column.");
                        streamWriter.WriteLine("        /// </summary>");
                        streamWriter.WriteLine("        /// <param name=" + quates + "iDataRecord" + quates + ">The r.</param>");
                        streamWriter.WriteLine("        /// <param name=" + quates + "columnName" + quates + ">Name of the column.</param>");
                        streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                        streamWriter.WriteLine("        bool HasColumn(System.Data.IDataRecord iDataRecord, string columnName);");
                        streamWriter.WriteLine();

                        streamWriter.WriteLine("        /// <summary>");
                        streamWriter.WriteLine("        /// Initializes the database connection.");
                        streamWriter.WriteLine("        /// </summary>");
                        streamWriter.WriteLine("        /// <param name=" + quates + "sqlConn" + quates + ">The SQL connection.</param>");
                        streamWriter.WriteLine("        /// <param name=" + quates + "error" + quates + ">The error.</param>");
                        streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                        streamWriter.WriteLine("        bool InitDatabaseConnection(out System.Data.SqlClient.SqlConnection sqlConn, out string error);");

                        //// Close out the class and namespace
                        streamWriter.WriteLine("    }");
                        streamWriter.WriteLine("}");
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
                throw new Exception(ex.ToString());
            }
        }

        #region Dal Layer

        /// <summary>
        /// Creates a string that represents the delete
        /// functionality of the data access class.
        /// </summary>
        /// <param name="table">The Table instance that this method will be created for.</param>
        /// <param name="streamWriter">The StreamWriter instance that will be used to create the method.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateDeleteMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;

                //// Append the method header
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// Deletes a record from the " + table.CodeHammerName + " table by its primary key.");
                streamWriter.WriteLine("        /// </summary>");
                string quates = @"""";
                streamWriter.WriteLine("        /// <param name=" + quates + variableName.Replace("_", "") + quates + ">The " + variableName.Replace("_", "") + ".</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");

                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        public bool " + className + "RemoveByID(" + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out string systemMessage)");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            systemMessage = string.Empty;");
                if (!ioManagerContract.EmptyDataLayerCheckBox)
                {
                   
                    streamWriter.WriteLine("            string nestedSystemMessage = string.Empty;");
                    streamWriter.WriteLine("            SqlConnection sqlConnection;");
                    streamWriter.WriteLine("            SqlCommand sqlCommand = new SqlCommand();");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("            try");
                    streamWriter.WriteLine("            {");

                    if (ioManagerContract.UseIoC)
                    {
                        streamWriter.WriteLine("                if (!this.iDatabaseManager.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }
                    else
                    {
                        streamWriter.WriteLine("                if (!DatabaseManager.Instance.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }

                    streamWriter.WriteLine("                {");

                    StringBuilder strBuildstring1 = new StringBuilder();
                    strBuildstring1.Append("    systemMessage = ");
                    strBuildstring1.Append(" nestedSystemMessage;");

                    streamWriter.WriteLine("                " + strBuildstring1.ToString());
                    streamWriter.WriteLine("                    return false;");
                    streamWriter.WriteLine("                }");
                    streamWriter.WriteLine();

                    streamWriter.WriteLine("                sqlCommand.CommandText = " + quates + table.CodeHammerSchemaName + "." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "RemoveByID" + quates + ";");
                    streamWriter.WriteLine("                sqlCommand.CommandType = CommandType.StoredProcedure;");
                    streamWriter.WriteLine("                sqlCommand.Connection = sqlConnection;");
                    streamWriter.WriteLine("                sqlCommand.Connection.Open();");

                    for (int i = 0; i < table.CodeHammerPrimaryKeys.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerPrimaryKeys[i];
                        streamWriter.WriteLine("                sqlCommand.Parameters.AddWithValue(\"@" + codeHammerColumn.CodeHammerName.Replace("_", "") + "\", " + variableName.Replace("_", "").Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + ");");
                    }

                    streamWriter.WriteLine("                sqlCommand.ExecuteScalar();");
                    streamWriter.WriteLine("                sqlCommand.Connection.Close();");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                systemMessage = string.Empty;");
                    streamWriter.WriteLine("                return true;");
                    streamWriter.WriteLine("            }");
                    streamWriter.WriteLine("            catch (Exception ex)");
                    streamWriter.WriteLine("            {");

                    StringBuilder strBuildstring3 = new StringBuilder();
                    strBuildstring3.Append("    systemMessage = ");
                    strBuildstring3.Append(" ex.StackTrace;");

                    streamWriter.WriteLine("            " + strBuildstring3.ToString());
                    streamWriter.WriteLine("                return false;");
                    streamWriter.WriteLine("            }");
                }
                else
                {
                    streamWriter.WriteLine("                return true;");
                }

                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Creates a string that represents the insert
        /// functionality of the data access class.
        /// </summary>
        /// <param name="table">The Table instance that this method will be created for.</param>
        /// <param name="streamWriter">The StreamWriter instance that will be used to create the method.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateInsertMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;

                //// Append the method header
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// Saves a record to the " + table.CodeHammerName + " table.");
                streamWriter.WriteLine("        /// </summary>");
                string quates = @"""";
                streamWriter.WriteLine("        /// <param name=" + quates + variableName.Replace("_", "") + quates + ">The " + variableName.Replace("_", "") + ".</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");

                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        public bool " + className + "Save(" + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out string systemMessage)");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            systemMessage = string.Empty;");
                if (!ioManagerContract.EmptyDataLayerCheckBox)
                {
                    streamWriter.WriteLine("            SqlConnection sqlConnection;");
                    streamWriter.WriteLine("            SqlCommand sqlCommand = new SqlCommand();");
                   
                    streamWriter.WriteLine("            string nestedSystemMessage = string.Empty;");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("            try");
                    streamWriter.WriteLine("            {");

                    if (ioManagerContract.UseIoC)
                    {
                        streamWriter.WriteLine("                if (!this.iDatabaseManager.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }
                    else
                    {
                        streamWriter.WriteLine("                if (!DatabaseManager.Instance.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }

                    streamWriter.WriteLine("                {");

                    StringBuilder strBuildstring1 = new StringBuilder();
                    strBuildstring1.Append("    systemMessage = ");
                    strBuildstring1.Append(" nestedSystemMessage;");

                    streamWriter.WriteLine("                " + strBuildstring1.ToString());
                    streamWriter.WriteLine("                    return false;");
                    streamWriter.WriteLine("                }");
                    streamWriter.WriteLine();

                    streamWriter.WriteLine("                sqlCommand.CommandText = " + quates + table.CodeHammerSchemaName + "." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "Save" + quates + ";");
                    streamWriter.WriteLine("                sqlCommand.CommandType = CommandType.StoredProcedure;");
                    streamWriter.WriteLine("                sqlCommand.Connection = sqlConnection;");
                    streamWriter.WriteLine("                sqlCommand.Connection.Open();");

                    for (int q = 0; q < table.CodeHammerColumns.Count; q++)
                    {
                        if (!table.CodeHammerColumns[q].CodeHammerIsIdentity)
                        {
                            CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[q];
                            streamWriter.WriteLine("                sqlCommand.Parameters.AddWithValue(\"@" + codeHammerColumn.CodeHammerName.Replace("_", "") + "\", " + variableName.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + ");");
                        }
                    }

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                sqlCommand.ExecuteScalar();");
                    streamWriter.WriteLine("                sqlCommand.Connection.Close();");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                systemMessage = string.Empty;");
                    streamWriter.WriteLine("                return true;");
                    streamWriter.WriteLine("            }");
                    streamWriter.WriteLine("            catch (Exception ex)");
                    streamWriter.WriteLine("            {");

                    StringBuilder strBuildstring3 = new StringBuilder();
                    strBuildstring3.Append("    systemMessage = ");
                    strBuildstring3.Append(" ex.StackTrace;");
                    streamWriter.WriteLine("            " + strBuildstring3.ToString());
                    streamWriter.WriteLine("                return false;");
                    streamWriter.WriteLine("            }");
                }
                else
                {
                    streamWriter.WriteLine("                return true;");
                }
                //// Append the method footer
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Creates the select all method.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateSelectAllMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;

                string variableNameTemp = string.Empty;
                bool hasIdentity = false;
                //// Append the method header
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// Selects a single record from the " + table.CodeHammerName + " table.");
                streamWriter.WriteLine("        /// </summary>");
                string quates = @"""";
                streamWriter.WriteLine("        /// <param name=" + quates + variableName.Replace("_", "") + quates + ">The " + variableName.Replace("_", "") + ".</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + variableName.Replace("_", "") + "List" + quates + ">The " + "" + variableName.Replace("_", "") + "List" + ".</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");

                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        public bool " + className + "GetAll(" + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out List<" + className + SuffixDto.Instance().DtoTextBox + "> " + variableName.Replace("_", "") + "List, out string systemMessage)");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            systemMessage = string.Empty;");
                streamWriter.WriteLine("            " + variableName.Replace("_", "") + "List = new List<" + className + SuffixDto.Instance().DtoTextBox + ">();");

                if (!ioManagerContract.EmptyDataLayerCheckBox)
                {
                    streamWriter.WriteLine("            SqlConnection sqlConnection;");
                    streamWriter.WriteLine("            SqlCommand sqlCommand = new SqlCommand();");
                    
                    streamWriter.WriteLine("            string nestedSystemMessage = string.Empty;");
                    streamWriter.WriteLine("            IDataReader reader = null;");


                    streamWriter.WriteLine();
                    streamWriter.WriteLine("            try");
                    streamWriter.WriteLine("            {");

                    if (ioManagerContract.UseIoC)
                    {
                        streamWriter.WriteLine("                if (!this.iDatabaseManager.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }
                    else
                    {
                        streamWriter.WriteLine("                if (!DatabaseManager.Instance.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }

                    streamWriter.WriteLine("                {");

                    StringBuilder strBuildstring1 = new StringBuilder();
                    strBuildstring1.Append("systemMessage = ");
                    strBuildstring1.Append(" nestedSystemMessage;");
                    streamWriter.WriteLine("                    " + strBuildstring1.ToString());
                    streamWriter.WriteLine("                    return false;");
                    streamWriter.WriteLine("                }");
                    streamWriter.WriteLine();
                    //// Append the parameter declarations
                    streamWriter.WriteLine("                sqlCommand.CommandText = " + quates + table.CodeHammerSchemaName + "." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "GetAll" + quates + ";");
                    streamWriter.WriteLine("                sqlCommand.CommandType = CommandType.StoredProcedure;");
                    streamWriter.WriteLine("                sqlCommand.Connection = sqlConnection;");
                    streamWriter.WriteLine("                sqlCommand.Connection.Open();");
                    streamWriter.WriteLine("                sqlCommand.Parameters.AddWithValue(\"@pageSize\", " + variableName.Replace("_", "") + ".PageSize);");
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                reader = sqlCommand.ExecuteReader();");

                    streamWriter.WriteLine();

                    for (int ii = 0; ii < table.CodeHammerPrimaryKeys.Count; ii++)
                    {
                        CodeHammerColumn codeHammerColumnPK = table.CodeHammerPrimaryKeys[ii];
                        if (codeHammerColumnPK.CodeHammerIsIdentity)
                        {
                            if (ioManagerContract.UseIoC)
                            {
                                streamWriter.WriteLine("                if (this.iDatabaseManager.HasColumn(reader, \"" + codeHammerColumnPK.CodeHammerName + "\"))");
                            }
                            else
                            {
                                streamWriter.WriteLine("                if (DatabaseManager.Instance.HasColumn(reader, \"" + codeHammerColumnPK.CodeHammerName + "\"))");
                            }

                            streamWriter.WriteLine("                {");
                            hasIdentity = true;
                        }
                    }

                    for (int a = 0; a < table.CodeHammerColumns.Count; a++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[a];
                        //// get rows for list of documents
                        streamWriter.WriteLine("                    " + "int ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + " = reader.GetOrdinal(\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim() + "\");");
                    }

                    ////while read
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                    while (reader.Read())");
                    streamWriter.WriteLine("                    {");
                    variableNameTemp = variableName.Replace("_", "") + "Temp";
                    streamWriter.WriteLine("                        " + className + SuffixDto.Instance().DtoTextBox + " " + variableNameTemp.Replace("_", "") + " = new " + className + SuffixDto.Instance().DtoTextBox + "();");
                    // streamWriter.WriteLine();

                    ////Check for primarykey
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];
                        ////Data contain

                        if (codeHammerColumn.CodeHammerIsNullable == true)
                        {
                            streamWriter.WriteLine("                        if (!reader.IsDBNull(ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "))");
                            streamWriter.WriteLine("                        {");

                            if (codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte[]"))
                            {
                                streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = (" + "byte[]" + ")reader[\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "\"];");
                            }
                            else if (codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte"))
                            {
                                streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = (" + "byte" + ")reader[\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "\"];");
                            }
                            else
                            {
                                streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", ""))) + " = reader." + codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn) + "(ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + ");");
                            }

                            streamWriter.WriteLine("                        }");

                            streamWriter.WriteLine();

                            streamWriter.WriteLine("                        else");
                            streamWriter.WriteLine("                        {");
                            streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = " + codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGetDefaultValue(codeHammerColumn) + ";");

                            streamWriter.WriteLine("                        }");
                            streamWriter.WriteLine();
                        }
                        else
                        {
                            if (codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte[]") || codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte"))
                            {
                                streamWriter.WriteLine("                        " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = (" + codeHammerDataUtilContract.CodeHammerGetCsType(codeHammerColumn) + ")reader[\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "\"];");
                            }
                            else
                            {
                                streamWriter.WriteLine("                        " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", ""))) + " = reader." + codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn) + "(ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + ");");
                            }
                            streamWriter.WriteLine();
                        }
                    }

                    streamWriter.WriteLine("                        " + variableName.Replace("_", "") + "List.Add(" + variableNameTemp.Replace("_", "") + ");");
                    streamWriter.WriteLine("                    }");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                    systemMessage = string.Empty;");

                    if (hasIdentity)
                    {
                        streamWriter.WriteLine("                }");
                    }
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                    return true;");

                    streamWriter.WriteLine("            }");
                    streamWriter.WriteLine("            catch (Exception ex)");
                    streamWriter.WriteLine("            {");

                    StringBuilder strBuildstring3 = new StringBuilder();
                    strBuildstring3.Append("systemMessage = ");
                    strBuildstring3.Append(" ex.StackTrace;");

                    streamWriter.WriteLine("                " + strBuildstring3.ToString());
                    streamWriter.WriteLine("                return false;");
                    streamWriter.WriteLine("            }");

                    streamWriter.WriteLine("            finally");
                    streamWriter.WriteLine("            {");
                    streamWriter.WriteLine("                if (reader != null && !reader.IsClosed)");
                    streamWriter.WriteLine("                {");
                    streamWriter.WriteLine("                    reader.Close();");
                    streamWriter.WriteLine("                }");
                    streamWriter.WriteLine("            }");
                }
                else
                {
                    streamWriter.WriteLine("                return true;");
                }
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Creates a string that represents the select by
        /// primary key functionality of the data access class.
        /// </summary>
        /// <param name="table">The Table instance that this method will be created for.</param>
        /// <param name="streamWriter">The StreamWriter instance that will be used to create the method.</param>
        /// <returns>if sucess then return true</returns>
        /// <returns></returns>
        public bool CodeHammerCreateSelectMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;

                string variableNameTemp = string.Empty;
                bool hasIdentity = false;
                //// Append the method header
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// Selects a single record from the " + table.CodeHammerName + " table.");
                streamWriter.WriteLine("        /// </summary>");
                string quates = @"""";
                streamWriter.WriteLine("        /// <param name=" + quates + variableName.Replace("_", "") + quates + ">The " + variableName.Replace("_", "") + ".</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + variableName.Replace("_", "") + "List" + quates + ">The " + quates + variableName.Replace("_", "") + "List" + quates + ".</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");

                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        public bool " + className + "GetByID(" + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out List<" + className + SuffixDto.Instance().DtoTextBox + "> " + variableName.Replace("_", "") + "List, out string systemMessage)");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            systemMessage = string.Empty;");
                streamWriter.WriteLine("            " + variableName.Replace("_", "") + "List = new List<" + className + SuffixDto.Instance().DtoTextBox + ">();");

                if (!ioManagerContract.EmptyDataLayerCheckBox)
                {
                    streamWriter.WriteLine("            SqlConnection sqlConnection;");
                    streamWriter.WriteLine("            SqlCommand sqlCommand = new SqlCommand();");
                   
                    streamWriter.WriteLine("            string nestedSystemMessage = string.Empty;");
                    streamWriter.WriteLine("            IDataReader reader = null;");


                    streamWriter.WriteLine();
                    streamWriter.WriteLine("            try");
                    streamWriter.WriteLine("            {");

                    if (ioManagerContract.UseIoC)
                    {
                        streamWriter.WriteLine("                if (!this.iDatabaseManager.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }
                    else
                    {
                        streamWriter.WriteLine("                if (!DatabaseManager.Instance.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }

                    streamWriter.WriteLine("                {");

                    StringBuilder strBuildstring1 = new StringBuilder();
                    strBuildstring1.Append("systemMessage = ");
                    strBuildstring1.Append(" nestedSystemMessage;");

                    streamWriter.WriteLine("                    " + strBuildstring1.ToString());
                    streamWriter.WriteLine("                    return false;");
                    streamWriter.WriteLine("                }");
                    streamWriter.WriteLine();

                    //// Append the parameter declarations
                    streamWriter.WriteLine("                sqlCommand.CommandText = " + quates + table.CodeHammerSchemaName + "." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "")) + "GetByID" + quates + ";");
                    streamWriter.WriteLine("                sqlCommand.CommandType = CommandType.StoredProcedure;");
                    streamWriter.WriteLine("                sqlCommand.Connection = sqlConnection;");
                    streamWriter.WriteLine("                sqlCommand.Connection.Open();");

                    for (int q = 0; q < table.CodeHammerColumns.Count; q++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[q];
                        if (table.CodeHammerPrimaryKeys.Any(x => x.CodeHammerName.Equals(codeHammerColumn.CodeHammerName.Replace("_", ""))))
                        {
                            streamWriter.WriteLine("                sqlCommand.Parameters.AddWithValue(\"@" + codeHammerColumn.CodeHammerName.Replace("_", "") + "\", " + variableName.Replace("_", "").Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + ");");
                        }
                    }

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                reader = sqlCommand.ExecuteReader();");

                    streamWriter.WriteLine();

                    for (int ii = 0; ii < table.CodeHammerPrimaryKeys.Count; ii++)
                    {
                        CodeHammerColumn codeHammerColumnPK = table.CodeHammerPrimaryKeys[ii];
                        if (codeHammerColumnPK.CodeHammerIsIdentity)
                        {
                            if (ioManagerContract.UseIoC)
                            {
                                streamWriter.WriteLine("                if (this.iDatabaseManager.HasColumn(reader, \"" + codeHammerColumnPK.CodeHammerName + "\"))");
                            }
                            else
                            {
                                streamWriter.WriteLine("                if (DatabaseManager.Instance.HasColumn(reader, \"" + codeHammerColumnPK.CodeHammerName + "\"))");
                            }

                            streamWriter.WriteLine("                {");
                            hasIdentity = true;
                        }
                    }

                    for (int a = 0; a < table.CodeHammerColumns.Count; a++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[a];
                        //// get rows for list of documents
                        streamWriter.WriteLine("                    " + "int ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + " = reader.GetOrdinal(\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim() + "\");");
                    }

                    ////while read
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                    while (reader.Read())");
                    streamWriter.WriteLine("                    {");
                    variableNameTemp = "" + variableName.Replace("_", "") + "Temp";
                    streamWriter.WriteLine("                        " + className + SuffixDto.Instance().DtoTextBox + " " + variableNameTemp.Replace("_", "") + " = new " + className + SuffixDto.Instance().DtoTextBox + "();");
                    // streamWriter.WriteLine();

                    ////Check for primarykey
                    for (int i = 0; i < table.CodeHammerColumns.Count; i++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[i];
                        ////Data contain

                        if (codeHammerColumn.CodeHammerIsNullable == true)
                        {
                            streamWriter.WriteLine("                        if (!reader.IsDBNull(ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "))");
                            streamWriter.WriteLine("                        {");

                            if (codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte[]"))
                            {
                                streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = (" + "byte[]" + ")reader[\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "\"];");
                            }
                            else if (codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte"))
                            {
                                streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = (" + "byte" + ")reader[\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "\"];");
                            }
                            else
                            {
                                streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = reader." + codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn) + "(ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + ");");
                            }

                            streamWriter.WriteLine("                        }");

                            streamWriter.WriteLine();

                            streamWriter.WriteLine("                        else");
                            streamWriter.WriteLine("                        {");
                            streamWriter.WriteLine("                            " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = " + codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGetDefaultValue(codeHammerColumn) + ";");

                            streamWriter.WriteLine("                        }");
                            streamWriter.WriteLine();
                        }
                        else
                        {
                            if (codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte[]") || codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn).Equals("byte"))
                            {
                                streamWriter.WriteLine("                        " + variableNameTemp.Replace("_", "") + "." + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + " = (" + codeHammerDataUtilContract.CodeHammerGetCsType(codeHammerColumn) + ")reader[\"" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + "\"];");
                            }
                            else
                            {
                                streamWriter.WriteLine("                        " + variableNameTemp.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + " = reader." + codeHammerDataUtilContract.CodeHammerGetCsTypeReaderGet(codeHammerColumn) + "(ordinal" + codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "") + ");");
                            }
                            streamWriter.WriteLine();
                        }
                    }

                    streamWriter.WriteLine("                        " + variableName.Replace("_", "") + "List.Add(" + variableNameTemp.Replace("_", "") + ");");
                    streamWriter.WriteLine("                    }");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                    systemMessage = string.Empty;");

                    if (hasIdentity)
                    {
                        streamWriter.WriteLine("                }");
                    }
                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                    return true;");

                    streamWriter.WriteLine("            }");
                    streamWriter.WriteLine("            catch (Exception ex)");
                    streamWriter.WriteLine("            {");

                    StringBuilder strBuildstring3 = new StringBuilder();
                    strBuildstring3.Append("systemMessage = ");
                    strBuildstring3.Append(" ex.StackTrace;");

                    streamWriter.WriteLine("                " + strBuildstring3.ToString());
                    streamWriter.WriteLine("                return false;");
                    streamWriter.WriteLine("            }");

                    streamWriter.WriteLine("            finally");
                    streamWriter.WriteLine("            {");
                    streamWriter.WriteLine("                if (reader != null && !reader.IsClosed)");
                    streamWriter.WriteLine("                {");
                    streamWriter.WriteLine("                    reader.Close();");
                    streamWriter.WriteLine("                }");
                    streamWriter.WriteLine("            }");
                }
                else
                {
                    streamWriter.WriteLine("                return true;");
                }
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Creates a string that represents the update
        /// functionality of the data access class.
        /// </summary>
        /// <param name="table">The Table instance that this method will be created for.</param>
        /// <param name="streamWriter">The StreamWriter instance that will be used to create the method.</param>
        /// <returns>
        /// if sucess then return true
        /// </returns>
        public bool CodeHammerCreateUpdateMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;

                //// Append the method header
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// Updates a record to the " + table.CodeHammerName + " table.");
                streamWriter.WriteLine("        /// </summary>");
                string quates = @"""";
                streamWriter.WriteLine("        /// <param name=" + quates + variableName.Replace("_", "") + quates + ">The " + variableName.Replace("_", "") + ".</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");

                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        public bool " + className + "SetByID(" + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out string systemMessage)");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            systemMessage = string.Empty;");
                if (!ioManagerContract.EmptyDataLayerCheckBox)
                {
                    streamWriter.WriteLine("            SqlConnection sqlConnection;");
                    streamWriter.WriteLine("            SqlCommand sqlCommand = new SqlCommand();");
                    
                    streamWriter.WriteLine("            string nestedSystemMessage = string.Empty;");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("            try");
                    streamWriter.WriteLine("            {");
                    if (ioManagerContract.UseIoC)
                    {
                        streamWriter.WriteLine("                if (!this.iDatabaseManager.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    }
                    else
                    {
                        streamWriter.WriteLine("              if (!DatabaseManager.Instance.InitDatabaseConnection(out sqlConnection, out nestedSystemMessage))");
                    } streamWriter.WriteLine("                {");

                    StringBuilder strBuildstring1 = new StringBuilder();
                    strBuildstring1.Append("systemMessage = ");
                    strBuildstring1.Append(" nestedSystemMessage;");

                    streamWriter.WriteLine("                    " + strBuildstring1.ToString());
                    streamWriter.WriteLine("                    return false;");
                    streamWriter.WriteLine("                }");
                    streamWriter.WriteLine();

                    streamWriter.WriteLine("                sqlCommand.CommandText = " + quates + table.CodeHammerSchemaName + "." + SuffixDto.Instance().SqlPrefixTextBox + codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName) + "SetByID" + quates + ";");
                    streamWriter.WriteLine("                sqlCommand.CommandType = CommandType.StoredProcedure;");
                    streamWriter.WriteLine("                sqlCommand.Connection = sqlConnection;");
                    streamWriter.WriteLine("                sqlCommand.Connection.Open();");

                    for (int q = 0; q < table.CodeHammerColumns.Count; q++)
                    {
                        CodeHammerColumn codeHammerColumn = table.CodeHammerColumns[q];
                        streamWriter.WriteLine("                sqlCommand.Parameters.AddWithValue(\"@" + codeHammerColumn.CodeHammerName + "\", " + variableName.Replace("_", "") + "." + codeHammerDataUtilContract.CodeHammerFormatPascal(codeHammerColumn.CodeHammerName.Replace(" ", string.Empty).Trim().Replace("_", "")) + ");");
                    }

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                sqlCommand.ExecuteScalar();");
                    streamWriter.WriteLine("                sqlCommand.Connection.Close();");

                    streamWriter.WriteLine();
                    streamWriter.WriteLine("                systemMessage = string.Empty;");
                    streamWriter.WriteLine("            }");
                    streamWriter.WriteLine("            catch (Exception ex)");
                    streamWriter.WriteLine("            {");

                    StringBuilder strBuildstring3 = new StringBuilder();
                    strBuildstring3.Append("systemMessage = ");
                    strBuildstring3.Append(" ex.StackTrace;");

                    streamWriter.WriteLine("                " + strBuildstring3.ToString());
                    streamWriter.WriteLine("                return false;");
                    streamWriter.WriteLine("            }");
                    streamWriter.WriteLine("                return true;");
                }
                else
                {
                    streamWriter.WriteLine("                return true;");
                }
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Is the code hammer create delete method.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool ICodeHammerCreateDeleteMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;
                string quates = @"""";
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "RemoveByID");
                streamWriter.WriteLine("        /// </summary>");
                streamWriter.WriteLine("        /// <param name=" + quates + className + SuffixDto.Instance().DtoTextBox + quates + ">The " + variableName.Replace("_", "") + "</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");
                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        bool " + className + "RemoveByID(global::Domain." + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out string systemMessage);");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        public bool CodeHammerCreateDeleteMethodTest(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;

                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "RemoveByID test.");
                streamWriter.WriteLine("        /// </summary>");
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.NUnit)
                {
                    streamWriter.WriteLine("        [Test]");
                }
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.VSUnitTest)
                {
                    streamWriter.WriteLine("        [TestMethod]");
                }
                streamWriter.WriteLine("        public void " + className + "RemoveByIDTest()");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            Assert.Fail();");
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Is the code hammer create insert method.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool ICodeHammerCreateInsertMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;
                string quates = @"""";

                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "Save.");
                streamWriter.WriteLine("        /// </summary>");
                streamWriter.WriteLine("        /// <param name=" + quates + className + SuffixDto.Instance().DtoTextBox + quates + ">The " + variableName.Replace("_", "") + "</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");
                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        bool " + className + "Save(global::Domain." + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out string systemMessage);");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Codes the hammer create insert method test.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateInsertMethodTest(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;

                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "Save test.");
                streamWriter.WriteLine("        /// </summary>");
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.NUnit)
                {
                    streamWriter.WriteLine("        [Test]");
                }
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.VSUnitTest)
                {
                    streamWriter.WriteLine("        [TestMethod]");
                }
                streamWriter.WriteLine("        public void " + className + "SaveTest()");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            Assert.Fail();");
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Is the code hammer create select all method.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool ICodeHammerCreateSelectAllMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;
                string variableNameTemp = string.Empty;

                string quates = @"""";
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// Select records by page size");
                streamWriter.WriteLine("        /// </summary>");
                streamWriter.WriteLine("        /// <param name=" + quates + className + SuffixDto.Instance().DtoTextBox + quates + ">The " + variableName.Replace("_", "") + "</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + className + SuffixDto.Instance().DtoTextBox + "List" + quates + ">The " + variableName.Replace("_", "") + "List</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");
                streamWriter.WriteLine("        /// <returns>return true if success</returns>");

                streamWriter.WriteLine("        bool " + className + "GetAll(global::Domain." + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out global::System.Collections.Generic.List<global::Domain." + className + SuffixDto.Instance().DtoTextBox + "> " + variableName.Replace("_", "") + "List, out string systemMessage);");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Codes the hammer create select all method test.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateSelectAllMethodTest(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;

                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "GetAll test.");
                streamWriter.WriteLine("        /// </summary>");
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.NUnit)
                {
                    streamWriter.WriteLine("        [Test]");
                }
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.VSUnitTest)
                {
                    streamWriter.WriteLine("        [TestMethod]");
                }
                streamWriter.WriteLine("        public void " + className + "GetAllTest()");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            Assert.Fail();");
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Is the code hammer create select method.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool ICodeHammerCreateSelectMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;
                string variableNameTemp = string.Empty;

                string quates = @"""";
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "GetByID");
                streamWriter.WriteLine("        /// </summary>");
                streamWriter.WriteLine("        /// <param name=" + quates + className + SuffixDto.Instance().DtoTextBox + quates + ">The " + variableName.Replace("_", "") + "</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + className + SuffixDto.Instance().DtoTextBox + "List" + quates + ">The " + variableName.Replace("_", "") + "List</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");
                streamWriter.WriteLine("        /// <returns>return true if success</returns>");

                streamWriter.WriteLine("        bool " + className + "GetByID(global::Domain." + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out global::System.Collections.Generic.List<global::Domain." + className + SuffixDto.Instance().DtoTextBox + "> " + variableName.Replace("_", "") + "List, out string systemMessage);");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Codes the hammer create select method test.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool CodeHammerCreateSelectMethodTest(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;

                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "GetByID test.");
                streamWriter.WriteLine("        /// </summary>");
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.NUnit)
                {
                    streamWriter.WriteLine("        [Test]");
                }
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.VSUnitTest)
                {
                    streamWriter.WriteLine("        [TestMethod]");
                }
                streamWriter.WriteLine("        public void " + className + "GetByIDTest()");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            Assert.Fail();");
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Is the code hammer create update method.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>if sucess then return true</returns>
        public bool ICodeHammerCreateUpdateMethod(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;
                string variableName = codeHammerDataUtilContract.CodeHammerFormatCamelDTO(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim()) + SuffixDto.Instance().DtoTextBox;
                string quates = @"""";
                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "SetByID");
                streamWriter.WriteLine("        /// </summary>");
                streamWriter.WriteLine("        /// <param name=" + quates + className + SuffixDto.Instance().DtoTextBox + quates + ">The " + variableName.Replace("_", "") + "</param>");
                streamWriter.WriteLine("        /// <param name=" + quates + "systemMessage" + quates + ">The systemMessage.</param>");
                streamWriter.WriteLine("        /// <returns>return true if success</returns>");
                streamWriter.WriteLine("        bool " + className + "SetByID(global::Domain." + className + SuffixDto.Instance().DtoTextBox + " " + variableName.Replace("_", "") + ", out string systemMessage);");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        /// <summary>
        /// Codes the hammer create update method test.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="streamWriter">The stream writer.</param>
        /// <returns>
        /// if sucess then return true
        /// </returns>
        public bool CodeHammerCreateUpdateMethodTest(CodeHammerTableDto table, StreamWriter streamWriter)
        {
            try
            {
                string className = codeHammerDataUtilContract.CodeHammerFormatPascal(table.CodeHammerName.Replace("_", "").Replace(" ", string.Empty).Trim());// +;//// +;

                streamWriter.WriteLine("        /// <summary>");
                streamWriter.WriteLine("        /// " + className + "SetByID test.");
                streamWriter.WriteLine("        /// </summary>");
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.NUnit)
                {
                    streamWriter.WriteLine("        [Test]");
                }
                if (ioManagerContract.UnitTestTypeEnum == IOManager.UnitTestEnum.VSUnitTest)
                {
                    streamWriter.WriteLine("        [TestMethod]");
                }
                streamWriter.WriteLine("        public void " + className + "SetByIDTest()");
                streamWriter.WriteLine("        {");
                streamWriter.WriteLine("            Assert.Fail();");
                streamWriter.WriteLine("        }");
                streamWriter.WriteLine();
                return true;
            }
            catch
            {
                return false;
                throw;
            }
        }

        #endregion Dal Layer
    }
}